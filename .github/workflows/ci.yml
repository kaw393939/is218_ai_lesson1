name: Student Assignment Grading

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  grade-assignment:
    name: "📊 Grade Assignment"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history for commit count

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest coverage

      - name: "📋 GRADING REPORT - Lesson Completion Status"
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          echo "════════════════════════════════════════════════════════════════"
          echo "                    � GRADING REPORT                          "
          echo "════════════════════════════════════════════════════════════════"
          echo ""
          
          # Student info
          STUDENT=$(git log --format='%an' | head -1)
          COMMIT_COUNT=$(git rev-list --count --no-merges HEAD)
          LAST_COMMIT=$(git log -1 --format='%h - %s (%ar)')
          
          echo "👤 Student: $STUDENT"
          echo "📝 Total Commits: $COMMIT_COUNT"
          echo "🕒 Last Commit: $LAST_COMMIT"
          echo ""
          echo "════════════════════════════════════════════════════════════════"
          echo ""
          
          # Test each lesson and track results
          TOTAL_LESSONS=13
          COMPLETED_LESSONS=0
          
          echo "📚 PART 1: Configuration Management"
          echo "────────────────────────────────────────────────────────────────"
          
          # Lesson 1.1
          if pytest tests/part1_configuration/test_lesson_1_1.py -v --tb=no -q 2>&1 | grep -q "passed"; then
            echo "✅ Lesson 1.1: Introduction to Configuration (12 tests) - COMPLETE"
            COMPLETED_LESSONS=$((COMPLETED_LESSONS + 1))
          else
            echo "❌ Lesson 1.1: Introduction to Configuration (12 tests) - INCOMPLETE"
          fi
          
          # Lesson 1.2
          if pytest tests/part1_configuration/test_lesson_1_2.py -v --tb=no -q 2>&1 | grep -q "passed"; then
            echo "✅ Lesson 1.2: Type-Safe Configuration (16 tests) - COMPLETE"
            COMPLETED_LESSONS=$((COMPLETED_LESSONS + 1))
          else
            echo "❌ Lesson 1.2: Type-Safe Configuration (16 tests) - INCOMPLETE"
          fi
          
          # Lesson 1.3
          if pytest tests/part1_configuration/test_lesson_1_3.py -v --tb=no -q 2>&1 | grep -q "passed"; then
            echo "✅ Lesson 1.3: Configuration Validation (19 tests) - COMPLETE"
            COMPLETED_LESSONS=$((COMPLETED_LESSONS + 1))
          else
            echo "❌ Lesson 1.3: Configuration Validation (19 tests) - INCOMPLETE"
          fi
          
          echo ""
          echo "📚 PART 2: Logging & Debugging"
          echo "────────────────────────────────────────────────────────────────"
          
          # Lesson 2.1
          if pytest tests/part2_logging/test_lesson_2_1.py -v --tb=no -q 2>&1 | grep -q "passed"; then
            echo "✅ Lesson 2.1: Why Logging Matters (20 tests) - COMPLETE"
            COMPLETED_LESSONS=$((COMPLETED_LESSONS + 1))
          else
            echo "❌ Lesson 2.1: Why Logging Matters (20 tests) - INCOMPLETE"
          fi
          
          # Lesson 2.2
          if pytest tests/part2_logging/test_lesson_2_2.py -v --tb=no -q 2>&1 | grep -q "passed"; then
            echo "✅ Lesson 2.2: Custom Log Handlers (19 tests) - COMPLETE"
            COMPLETED_LESSONS=$((COMPLETED_LESSONS + 1))
          else
            echo "❌ Lesson 2.2: Custom Log Handlers (19 tests) - INCOMPLETE"
          fi
          
          # Lesson 2.3
          if pytest tests/part2_logging/test_lesson_2_3.py -v --tb=no -q 2>&1 | grep -q "passed"; then
            echo "✅ Lesson 2.3: Contextual Logging (24 tests) - COMPLETE"
            COMPLETED_LESSONS=$((COMPLETED_LESSONS + 1))
          else
            echo "❌ Lesson 2.3: Contextual Logging (24 tests) - INCOMPLETE"
          fi
          
          # Lesson 2.4
          if pytest tests/part2_logging/test_lesson_2_4.py -v --tb=no -q 2>&1 | grep -q "passed"; then
            echo "✅ Lesson 2.4: Secure Logging (34 tests) - COMPLETE"
            COMPLETED_LESSONS=$((COMPLETED_LESSONS + 1))
          else
            echo "❌ Lesson 2.4: Secure Logging (34 tests) - INCOMPLETE"
          fi
          
          echo ""
          echo "📚 PART 3: REPL (Interactive CLI)"
          echo "────────────────────────────────────────────────────────────────"
          
          # Lesson 3.1
          if pytest tests/part3_repl/test_lesson_3_1.py -v --tb=no -q 2>&1 | grep -q "passed"; then
            echo "✅ Lesson 3.1: Building Your First REPL (22 tests) - COMPLETE"
            COMPLETED_LESSONS=$((COMPLETED_LESSONS + 1))
          else
            echo "❌ Lesson 3.1: Building Your First REPL (22 tests) - INCOMPLETE"
          fi
          
          # Lesson 3.2
          if pytest tests/part3_repl/test_lesson_3_2.py -v --tb=no -q 2>&1 | grep -q "passed"; then
            echo "✅ Lesson 3.2: Configuration & Formatting (28 tests) - COMPLETE"
            COMPLETED_LESSONS=$((COMPLETED_LESSONS + 1))
          else
            echo "❌ Lesson 3.2: Configuration & Formatting (28 tests) - INCOMPLETE"
          fi
          
          # Lesson 3.3
          if pytest tests/part3_repl/test_lesson_3_3.py -v --tb=no -q 2>&1 | grep -q "passed"; then
            echo "✅ Lesson 3.3: Adding Logging to REPL (25 tests) - COMPLETE"
            COMPLETED_LESSONS=$((COMPLETED_LESSONS + 1))
          else
            echo "❌ Lesson 3.3: Adding Logging to REPL (25 tests) - INCOMPLETE"
          fi
          
          echo ""
          echo "📚 PART 4: AI Chat with Cost Tracking"
          echo "────────────────────────────────────────────────────────────────"
          
          # Lesson 4.1
          if pytest tests/part4_chat/test_lesson_4_1.py -v --tb=no -q 2>&1 | grep -q "passed"; then
            echo "✅ Lesson 4.1: OpenAI Integration & Costs (36 tests) - COMPLETE"
            COMPLETED_LESSONS=$((COMPLETED_LESSONS + 1))
          else
            echo "❌ Lesson 4.1: OpenAI Integration & Costs (36 tests) - INCOMPLETE"
          fi
          
          # Lesson 4.2
          if pytest tests/part4_chat/test_lesson_4_2_simple.py -v --tb=no -q 2>&1 | grep -q "passed"; then
            echo "✅ Lesson 4.2: Budget Management (12 tests) - COMPLETE"
            COMPLETED_LESSONS=$((COMPLETED_LESSONS + 1))
          else
            echo "❌ Lesson 4.2: Budget Management (12 tests) - INCOMPLETE"
          fi
          
          # Lesson 4.3 (reading only, no tests)
          echo "📖 Lesson 4.3: Cost Optimization (0 tests) - READING ONLY"
          COMPLETED_LESSONS=$((COMPLETED_LESSONS + 1))
          
          echo ""
          echo "════════════════════════════════════════════════════════════════"
          echo "                        📊 FINAL SCORE                          "
          echo "════════════════════════════════════════════════════════════════"
          echo ""
          
          PERCENTAGE=$((COMPLETED_LESSONS * 100 / TOTAL_LESSONS))
          echo "Lessons Complete: $COMPLETED_LESSONS / $TOTAL_LESSONS ($PERCENTAGE%)"
          echo ""
          
          if [ $PERCENTAGE -eq 100 ]; then
            echo "🎉 GRADE: A+ (100%) - ALL LESSONS COMPLETE!"
            echo "   Outstanding work! Student has mastered all concepts."
          elif [ $PERCENTAGE -ge 90 ]; then
            echo "🌟 GRADE: A ($PERCENTAGE%) - EXCELLENT"
            echo "   Nearly complete. Excellent progress!"
          elif [ $PERCENTAGE -ge 80 ]; then
            echo "👍 GRADE: B ($PERCENTAGE%) - GOOD"
            echo "   Good progress. A few lessons remaining."
          elif [ $PERCENTAGE -ge 70 ]; then
            echo "📚 GRADE: C ($PERCENTAGE%) - SATISFACTORY"
            echo "   Satisfactory progress. Keep working!"
          elif [ $PERCENTAGE -ge 60 ]; then
            echo "⚠️  GRADE: D ($PERCENTAGE%) - NEEDS IMPROVEMENT"
            echo "   More work needed. Review incomplete lessons."
          else
            echo "❌ GRADE: F ($PERCENTAGE%) - INCOMPLETE"
            echo "   Assignment incomplete. Significant work required."
          fi
          
          echo ""
          echo "════════════════════════════════════════════════════════════════"
          
          # Exit with success - we don't want to fail the build, just show the report
          exit 0

      - name: "📊 Overall Test Summary"
        if: always()
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          echo ""
          echo "════════════════════════════════════════════════════════════════"
          echo "              📊 DETAILED TEST EXECUTION REPORT                 "
          echo "════════════════════════════════════════════════════════════════"
          echo ""
          
          # Run all tests with summary
          pytest tests -v --tb=short || true
          
          echo ""
          echo "════════════════════════════════════════════════════════════════"

      - name: "� Code Coverage Report"
        if: always()
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          echo ""
          echo "════════════════════════════════════════════════════════════════"
          echo "                    � CODE COVERAGE REPORT                     "
          echo "════════════════════════════════════════════════════════════════"
          echo ""
          
          coverage run -m pytest tests 2>/dev/null || true
          coverage report --show-missing
          
          echo ""
          echo "════════════════════════════════════════════════════════════════"